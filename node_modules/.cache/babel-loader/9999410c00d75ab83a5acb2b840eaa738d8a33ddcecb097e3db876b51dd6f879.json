{"ast":null,"code":"var _jsxFileName = \"/Users/apple/Documents/Development/Project-system/src/components/inputs/DateWriteInput.jsx\";\nimport { Input, InputGroup, InputGroupText } from \"reactstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DateWriteInput = ({\n  value,\n  setValue,\n  label,\n  placeholder\n}) => {\n  // Format the input value as dd-mm-yyyy\n  const formatDate = val => {\n    // Remove non-digit characters\n    const digits = val.replace(/\\D/g, \"\");\n\n    // Limit the length to 8 digits (ddmmyyyy)\n    const limitedDigits = digits.substring(0, 8);\n\n    // Format as dd-mm-yyyy\n    const day = limitedDigits.substring(0, 2);\n    const month = limitedDigits.substring(2, 4);\n    const year = limitedDigits.substring(4, 8);\n    let formatted = \"\";\n    if (day) formatted += day;\n    if (month) formatted += \"  -  \" + month;\n    if (year) formatted += \"  -  \" + year;\n    return formatted;\n  };\n  const handleChange = e => {\n    const inputValue = e.target.value;\n    const formattedValue = formatDate(inputValue);\n    if (setValue) setValue(formattedValue);\n  };\n  return /*#__PURE__*/_jsxDEV(InputGroup, {\n    children: [/*#__PURE__*/_jsxDEV(InputGroupText, {\n      className: \"bg-transparent color-7777\",\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      type: \"text\",\n      onChange: handleChange,\n      placeholder: placeholder !== null && placeholder !== void 0 ? placeholder : \"dd-mm-yyyy\",\n      value: value,\n      className: \"normal-input bg-transparent\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_c = DateWriteInput;\nexport default DateWriteInput;\nvar _c;\n$RefreshReg$(_c, \"DateWriteInput\");","map":{"version":3,"names":["Input","InputGroup","InputGroupText","jsxDEV","_jsxDEV","DateWriteInput","value","setValue","label","placeholder","formatDate","val","digits","replace","limitedDigits","substring","day","month","year","formatted","handleChange","e","inputValue","target","formattedValue","children","className","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","_c","$RefreshReg$"],"sources":["/Users/apple/Documents/Development/Project-system/src/components/inputs/DateWriteInput.jsx"],"sourcesContent":["import { Input, InputGroup, InputGroupText } from \"reactstrap\";\r\n\r\nconst DateWriteInput = ({ value, setValue, label,placeholder }) => {\r\n  // Format the input value as dd-mm-yyyy\r\n  const formatDate = (val) => {\r\n    // Remove non-digit characters\r\n    const digits = val.replace(/\\D/g, \"\");\r\n\r\n    // Limit the length to 8 digits (ddmmyyyy)\r\n    const limitedDigits = digits.substring(0, 8);\r\n\r\n    // Format as dd-mm-yyyy\r\n    const day = limitedDigits.substring(0, 2);\r\n    const month = limitedDigits.substring(2, 4);\r\n    const year = limitedDigits.substring(4, 8);\r\n\r\n    let formatted = \"\";\r\n    if (day) formatted += day;\r\n    if (month) formatted += \"  -  \" + month;\r\n    if (year) formatted += \"  -  \" + year;\r\n\r\n    return formatted;\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const inputValue = e.target.value;\r\n    const formattedValue = formatDate(inputValue);\r\n    if (setValue) setValue(formattedValue);\r\n  };\r\n\r\n  return (\r\n    <InputGroup>\r\n      <InputGroupText className=\"bg-transparent color-7777\">{label}</InputGroupText>\r\n      <Input\r\n        type=\"text\"\r\n        onChange={handleChange}\r\n        placeholder={placeholder??\"dd-mm-yyyy\"}\r\n        value={value}\r\n        className=\"normal-input bg-transparent\"\r\n   \r\n      />\r\n    </InputGroup>\r\n  );\r\n};\r\n\r\nexport default DateWriteInput;\r\n"],"mappings":";AAAA,SAASA,KAAK,EAAEC,UAAU,EAAEC,cAAc,QAAQ,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/D,MAAMC,cAAc,GAAGA,CAAC;EAAEC,KAAK;EAAEC,QAAQ;EAAEC,KAAK;EAACC;AAAY,CAAC,KAAK;EACjE;EACA,MAAMC,UAAU,GAAIC,GAAG,IAAK;IAC1B;IACA,MAAMC,MAAM,GAAGD,GAAG,CAACE,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;;IAErC;IACA,MAAMC,aAAa,GAAGF,MAAM,CAACG,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;;IAE5C;IACA,MAAMC,GAAG,GAAGF,aAAa,CAACC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;IACzC,MAAME,KAAK,GAAGH,aAAa,CAACC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;IAC3C,MAAMG,IAAI,GAAGJ,aAAa,CAACC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;IAE1C,IAAII,SAAS,GAAG,EAAE;IAClB,IAAIH,GAAG,EAAEG,SAAS,IAAIH,GAAG;IACzB,IAAIC,KAAK,EAAEE,SAAS,IAAI,OAAO,GAAGF,KAAK;IACvC,IAAIC,IAAI,EAAEC,SAAS,IAAI,OAAO,GAAGD,IAAI;IAErC,OAAOC,SAAS;EAClB,CAAC;EAED,MAAMC,YAAY,GAAIC,CAAC,IAAK;IAC1B,MAAMC,UAAU,GAAGD,CAAC,CAACE,MAAM,CAACjB,KAAK;IACjC,MAAMkB,cAAc,GAAGd,UAAU,CAACY,UAAU,CAAC;IAC7C,IAAIf,QAAQ,EAAEA,QAAQ,CAACiB,cAAc,CAAC;EACxC,CAAC;EAED,oBACEpB,OAAA,CAACH,UAAU;IAAAwB,QAAA,gBACTrB,OAAA,CAACF,cAAc;MAACwB,SAAS,EAAC,2BAA2B;MAAAD,QAAA,EAAEjB;IAAK;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAiB,CAAC,eAC9E1B,OAAA,CAACJ,KAAK;MACJ+B,IAAI,EAAC,MAAM;MACXC,QAAQ,EAAEZ,YAAa;MACvBX,WAAW,EAAEA,WAAW,aAAXA,WAAW,cAAXA,WAAW,GAAE,YAAa;MACvCH,KAAK,EAAEA,KAAM;MACboB,SAAS,EAAC;IAA6B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAExC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACQ,CAAC;AAEjB,CAAC;AAACG,EAAA,GAzCI5B,cAAc;AA2CpB,eAAeA,cAAc;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}