{"ast":null,"code":"var _jsxFileName = \"/Users/apple/Documents/Development/Project-system/src/components/inputs/CodeInput.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { Input } from \"reactstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CodeInput = ({\n  totalDigits,\n  value,\n  setValue,\n  maxNumberPerCell,\n  onError\n}) => {\n  _s();\n  const [currentDigitsValue, setCurrentDigitsValue] = useState([]);\n  const inputRefs = useRef([]);\n  const handleChangeValue = (newValue, index) => {\n    if (newValue <= maxNumberPerCell) {\n      let array = [...currentDigitsValue];\n      array[index] = newValue;\n      setValue(array === null || array === void 0 ? void 0 : array.join(\"-\"));\n      // Focus the next input if the current one is filled\n      if (newValue.toString().length === maxNumberPerCell.toString().length && index < totalDigits - 1) {\n        let nextInput = document.getElementById(`digit-input-index-${index + 1}`);\n        if (nextInput) {\n          nextInput === null || nextInput === void 0 ? void 0 : nextInput.focus();\n        }\n      }\n    } else {\n      if (onError) onError();\n      toast.error(`Only values between 0 and ${maxNumberPerCell + 1} are allowed `);\n    }\n  };\n  useEffect(() => {\n    let firstValue = [];\n    if (value !== \"\") {\n      let array = value === null || value === void 0 ? void 0 : value.split(\"-\");\n      setCurrentDigitsValue(array);\n    } else {\n      for (let i = 0; i < totalDigits; i++) {\n        firstValue.push(\"\");\n      }\n      setCurrentDigitsValue(firstValue);\n    }\n  }, [value]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"d-flex align-items-center justify-content-center \",\n    children: currentDigitsValue === null || currentDigitsValue === void 0 ? void 0 : currentDigitsValue.map((digitValue, index) => /*#__PURE__*/_jsxDEV(Input, {\n      style: {\n        marginLeft: \"5px\",\n        marginRight: \"5px\"\n      },\n      className: \"digit-input\",\n      max: maxNumberPerCell,\n      id: `digit-input-index-${index}`,\n      placeholder: \"0\",\n      value: digitValue !== \"\" ? Number(digitValue) : \"\",\n      onChange: e => {\n        var _Number, _e$target;\n        return handleChangeValue((_Number = Number(e === null || e === void 0 ? void 0 : (_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.value)) === null || _Number === void 0 ? void 0 : _Number.toPrecision(1), index);\n      },\n      ref: el => inputRefs.current[index] = el,\n      type: \"number\"\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(CodeInput, \"SS9AfbdcappEIxktihI8feK1laU=\");\n_c = CodeInput;\nexport default CodeInput;\nvar _c;\n$RefreshReg$(_c, \"CodeInput\");","map":{"version":3,"names":["useEffect","useRef","useState","toast","Input","jsxDEV","_jsxDEV","CodeInput","totalDigits","value","setValue","maxNumberPerCell","onError","_s","currentDigitsValue","setCurrentDigitsValue","inputRefs","handleChangeValue","newValue","index","array","join","toString","length","nextInput","document","getElementById","focus","error","firstValue","split","i","push","className","children","map","digitValue","style","marginLeft","marginRight","max","id","placeholder","Number","onChange","e","_Number","_e$target","target","toPrecision","ref","el","current","type","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/apple/Documents/Development/Project-system/src/components/inputs/CodeInput.jsx"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Input } from \"reactstrap\";\r\n\r\nconst CodeInput = ({\r\n  totalDigits,\r\n  value,\r\n  setValue,\r\n  maxNumberPerCell,\r\n  onError,\r\n}) => {\r\n  const [currentDigitsValue, setCurrentDigitsValue] = useState([]);\r\n  const inputRefs = useRef([]);\r\n\r\n  const handleChangeValue = (newValue, index) => {\r\n    if (newValue <= maxNumberPerCell) {\r\n      let array = [...currentDigitsValue];\r\n      array[index] = newValue;\r\n      setValue(array?.join(\"-\"));\r\n      // Focus the next input if the current one is filled\r\n      if (\r\n        newValue.toString().length === maxNumberPerCell.toString().length &&\r\n        index < totalDigits - 1\r\n      ) {\r\n        let nextInput = document.getElementById(\r\n          `digit-input-index-${index + 1}`\r\n        );\r\n        if (nextInput) {\r\n          nextInput?.focus();\r\n        }\r\n      }\r\n    } else {\r\n      if (onError) onError();\r\n      toast.error(\r\n        `Only values between 0 and ${maxNumberPerCell + 1} are allowed `\r\n      );\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    let firstValue = [];\r\n    if (value !== \"\") {\r\n      let array = value?.split(\"-\");\r\n      setCurrentDigitsValue(array);\r\n    } else {\r\n      for (let i = 0; i < totalDigits; i++) {\r\n        firstValue.push(\"\");\r\n      }\r\n      setCurrentDigitsValue(firstValue);\r\n    }\r\n  }, [value]);\r\n\r\n  return (\r\n    <div className=\"d-flex align-items-center justify-content-center \">\r\n      {currentDigitsValue?.map((digitValue, index) => (\r\n        <Input\r\n          style={{ marginLeft: \"5px\", marginRight: \"5px\" }}\r\n          key={index}\r\n          className=\"digit-input\"\r\n          max={maxNumberPerCell}\r\n          id={`digit-input-index-${index}`}\r\n          placeholder=\"0\"\r\n          value={digitValue !== \"\" ? Number(digitValue) : \"\"}\r\n          onChange={(e) =>\r\n            handleChangeValue(Number(e?.target?.value)?.toPrecision(1), index)\r\n          }\r\n          ref={(el) => (inputRefs.current[index] = el)}\r\n          type=\"number\"\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CodeInput;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}