{"ast":null,"code":"import axios from \"axios\";\n\n// Create an Axios instance\nconst axiosInstance = axios.create({\n  baseURL: process.env.REACT_APP_API_BASE_URL,\n  timeout: 10000,\n  // Request timeout (10 seconds)\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// Request interceptor to include token (if applicable)\naxiosInstance.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"authToken\"); // Retrieve token from local storage or a secure location\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle responses globally\naxiosInstance.interceptors.response.use(response => {\n  return response;\n}, error => {\n  if (error.response) {\n    // Handle known error types, such as 401 Unauthorized, globally\n    if (error.response.status === 401) {\n      // Optionally logout or redirect to login page\n      console.log(\"Unauthorized - Redirecting to login\");\n    }\n  }\n  return Promise.reject(error);\n});\nexport default axiosInstance;","map":{"version":3,"names":["axios","axiosInstance","create","baseURL","process","env","REACT_APP_API_BASE_URL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","status","console","log"],"sources":["/Users/apple/Documents/Development/Project-system/src/services/userServices.js"],"sourcesContent":["import axios from \"axios\";\n\n// Create an Axios instance\nconst axiosInstance = axios.create({\n  baseURL: process.env.REACT_APP_API_BASE_URL,\n  timeout: 10000, // Request timeout (10 seconds)\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n\n// Request interceptor to include token (if applicable)\naxiosInstance.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem(\"authToken\"); // Retrieve token from local storage or a secure location\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor to handle responses globally\naxiosInstance.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    if (error.response) {\n      // Handle known error types, such as 401 Unauthorized, globally\n      if (error.response.status === 401) {\n        // Optionally logout or redirect to login page\n        console.log(\"Unauthorized - Redirecting to login\");\n      }\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport default axiosInstance;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,aAAa,GAAGD,KAAK,CAACE,MAAM,CAAC;EACjCC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,sBAAsB;EAC3CC,OAAO,EAAE,KAAK;EAAE;EAChBC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAP,aAAa,CAACQ,YAAY,CAACC,OAAO,CAACC,GAAG,CACnCC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;EACjD,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAhB,aAAa,CAACQ,YAAY,CAACW,QAAQ,CAACT,GAAG,CACpCS,QAAQ,IAAK;EACZ,OAAOA,QAAQ;AACjB,CAAC,EACAH,KAAK,IAAK;EACT,IAAIA,KAAK,CAACG,QAAQ,EAAE;IAClB;IACA,IAAIH,KAAK,CAACG,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;MACjC;MACAC,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;IACpD;EACF;EACA,OAAOL,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAehB,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}